printf("请输入节点、边数:");
/*
* edge表示优先级排序好的结构体数组
* graph邻接表
* n 图的顶点数
* l 图的边数
*/
typedef int vextype;
struct arcnode
{
	int adjvex;//表结点编号
	int info; //记录边的权值 
	struct arcnode *nextarc; //头结点下一个结点 
};
typedef struct arcnode *arcptr;
typedef struct vexnode
{
	vextype vexdata; //头结点 
	arcptr firstarc;//第一个邻结点的指针 
}adjlist; //存储头节点

//用于存储点、边信息 
typedef struct edge
{
	int a;
	int b;
	int info;
}Edge;

typedef struct dis
{
	int start;
	int end;
	int distance;
}Dis;

void setadjlist(adjlist graph[]) /*根据所读入的边，建立图的邻接表*/
{
	int v1,v2,v3;
	arcptr p,q;
	scanf("%d%d%d",&v1,&v2,&v3);//读入第一条边（v1，v2）v1表示头，v2表示表结点 v3表示权值 
	while(v1!=0) //边的结束条件为v1 = 0 
	{
		graph[v1].vexdata = v1;
		q = (arcptr)malloc(sizeof(struct arcnode));
		q->adjvex = v2; //表结点 
		q->info = v3;
		q->nextarc = NULL;//后面不存在表结点赋值为空 
		if(graph[v1].firstarc==NULL)
			graph[v1].firstarc = q;
		else
		{
			p = graph[v1].firstarc;
			while(p->nextarc)
				p = p->nextarc;
			p->nextarc = q; //将此边加入到表结点最后 
		}
		scanf("%d%d%d",&v1,&v2,&v3); //读入下一条边 
	}
}

void get_Edge(Edge edge[],adjlist graph[],int n)
{
	int i,count = 0;
	arcptr p;
	for(i = 1;i <= n;i++)
	{
		p = graph[i].firstarc;
		
		while(p)
		{
			edge[count].a = i;//记录头节点 
			edge[count].b = p->adjvex;//记录表结点 
			edge[count].info = p->info;//存储两点之间的权值 
			count++;
			p = p->nextarc;	
		}
	}
}


void sxf(Dis dis[],int t,int w){
	int i,j;
	Dis x;
	i = t;
	x = dis[i];
	j = 2 * i;
	while(j<=w){
		if((j < w)&&(dis[j].distance<dis[j+1].distance))
			j++;
		if(x.distance<dis[j].distance)
		{
			dis[i] = dis[j];
			i = j;
			j = j * 2;
		}else{
			j = w + 1;
		}
	}
	dis[i] = x;
}

void dpx(Dis dis[],int n){
	int i;
	Dis x;
	for(i = n/2;i>=1;i--){
		sxf(dis,i,n);
	}
	for(i = n;i>=2;i--){
		x = dis[1];
		dis[1] = dis[i];
		dis[i] = x;
		sxf(dis,1,i-1);
	}
}


void INIT(Dis dis[],adjlist graph[],int key){
	arcptr p;
	p = graph[key].firstarc;
	dis[key].distance = 0;
	dis[key].end = 0;
	dis[key].start = 0;
	while(p)
	{
		dis[p->adjvex].start = key;
		dis[p->adjvex].end = p->adjvex;
		dis[p->adjvex].distance = p->info;
		p = p->nextarc;
	}
}

void Decrease(Dis dis[],int begin,int key,int weight,int n){
	dis[key].distance = weight;
	dis[key].start = begin;
	dis[key].end = key;
}

void copyTo(Dis dis[],Dis dv[],int n)
{
	int i;
	for(i = 1;i<=n;i++)
	{
		dv[i].start = dis[i].start;
		dv[i].end = dis[i].end;
		dv[i].distance = dis[i].distance;
	}
}

/*
* edge表示优先级排序好的结构体数组
* graph邻接表
* n 图的顶点数
* l 图的边数 
*/
void Dijkstra(Edge edge[],adjlist graph[],int n,int l,int begin){
	int i,j,t,k,Pos,count = 0,sum = 0,all=0,start,end;
	Dis dis[n+1],dv[n+1]; //计算最小距离 
	Dis T[n+1]; //记录以访问过的点
	Edge temp;
	arcptr p,q;
	for(i = 1;i<=n;i++){
		dis[i].distance = 999; //所有权值初始化为无穷大 
		dis[i].start = 0;
		dis[i].end = 0;
	}
	INIT(dis,graph,begin);
	copyTo(dis,dv,n);
	for(k = 1;k<=n;k++)
	{
		printf("%d(%d,%d) ",dis[k].end,dis[k].start,dis[k].distance);
	}
	T[1].start = 0;
	T[1].end = 1;
	T[1].distance = 0;
	dpx(dv,n);
	printf("\n");
	for(i = 2;i<=n;i++){
		T[i].start = dv[i].start;
		T[i].end = dv[i].end;
		T[i].distance = dv[i].distance;
		p = graph[T[i].end].firstarc;
		while(p)
		{
			sum = 0;
			sum = T[i].distance + p->info;
			if(sum < dis[p->adjvex].distance)
			{
				Decrease(dis,T[i].end,p->adjvex,sum,n);
				copyTo(dis,dv,n);
				dpx(dv,n);
				for(k = 1;k<=n;k++)
				{
					printf("%d(%d,%d) ",dis[k].end,dis[k].start,dis[k].distance);
				}
				printf("\n");
			}
			p = p->nextarc;
		}
	}
	printf("各点最短路径经过的点:\n");
	for(i = 2;i<=n;i++)
	{
		
		printf("%d(%d,%d)  ",T[i].end,T[i].start,T[i].distance);
//		printf("\n"); 
	}
}

int main(){
	
	arcptr p;
	int i,j,n,l;
	
	printf("请输入节点、边数:");
	scanf("%d %d",&n,&l);
	fflush(stdin);
	adjlist graph[n+1];
	Edge edge[l+1];
	printf("请输入顶点、弧、权值信息:\n"); 
	/***********************初始化邻接表*****************************/ 
	for(i = 0;i<=n;i++)
	{
		graph[i].firstarc = NULL; //初始化头节点 
	}
	
	printf("请输入边和权值信息:\n");
	setadjlist(graph); //创建 
	fflush(stdin);
	get_Edge(edge,graph,n);
	Dijkstra(edge,graph,n,l,1);
	return 0;
}

/*
1 2 3
1 4 7
2 1 3
2 3 4
2 4 2
3 2 4
3 4 5
3 5 6
4 1 7
4 2 2
4 3 5
4 5 4
5 4 4
5 3 6
0 0 0
*/
